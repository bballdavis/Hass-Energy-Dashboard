import { LitElement, PropertyValues, TemplateResult, CSSResultGroup } from 'lit';
import { EntityInfo, EnergyDashboardConfig } from './types';
export declare class EnergyDashboardEntityCard extends LitElement {
    hass: any;
    config: EnergyDashboardConfig | undefined;
    powerEntities: EntityInfo[];
    energyEntities: EntityInfo[];
    entityToggleStates: Record<string, boolean>;
    energyEntityToggleStates: Record<string, boolean>;
    viewMode: 'power' | 'energy';
    private _initialized;
    private _energyInitialized;
    private powerScrollPosition;
    private energyScrollPosition;
    private powerContainerRef?;
    private energyContainerRef?;
    connectedCallback(): void;
    setConfig(config: EnergyDashboardConfig): void;
    updated(changedProperties: PropertyValues): void;
    static get cardType(): string;
    static get displayName(): string;
    static get description(): string;
    static get icon(): string;
    static getConfigElement(): HTMLElement;
    static getStubConfig(): object;
    getCardSize(): number;
    protected willUpdate(changedProperties: PropertyValues): void;
    private _updateEntities;
    private _updatePowerEntities;
    private _updateEnergyEntities;
    private _initializePowerToggleStates;
    private _initializeEnergyToggleStates;
    private _savePowerToggleStates;
    private _saveEnergyToggleStates;
    private _resetToPowerDefaultEntities;
    private _clearAllPowerEntities;
    private _selectAllPowerEntities;
    private _togglePowerEntity;
    private _resetToEnergyDefaultEntities;
    private _clearAllEnergyEntities;
    private _selectAllEnergyEntities;
    private _toggleEnergyEntity;
    private _togglePersistence;
    private _loadPersistenceState;
    private _savePersistenceState;
    private _saveViewMode;
    private _loadViewMode;
    private _toggleViewMode;
    private _handleEntityClick;
    private renderModeToggle;
    private renderControlButtons;
    private renderPersistenceToggle;
    private renderEntityItem;
    private renderEntitiesContainer;
    private setContainerRef;
    static get styles(): CSSResultGroup;
    render(): TemplateResult;
}
